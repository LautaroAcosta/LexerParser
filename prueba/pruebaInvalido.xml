<!DOCTYPE article>
<article>
	<info>
   	<title>Trabajo Práctico Integrador: Diseño e implementación de Lexer y Parser</title>
    	<abstract>
        	<title>Ejemplo TPI</title>
        	<para>Aceptor DocBook/XML y Conversor a HTML</para>
        	<simpara>Simple Párrafo: Aceptor DocBook/XML y Conversor a HTML</simpara>
    	</abstract>
    	<author>
        	<personname>
            	<firstname>Rodrigo</firstname>
            	<surname>Vigil</surname>
        	</personname>
    	</author>
    	<date>2023</date>
    	<copyright>2023</copyright>
    	<address>
        	<city>Resistencia</city>
        	<state>Chaco</state>
        	<postcode>H3500</postcode>
        	<street>French 414</street>
        	<email>ssl@gmail.com</email>
        	<phone>3624888888s</phone>
    	</address>
	</info>
	<title>Trabajo Práctico Integrador: Diseño e implementación de Lexer y Parser</title>
        <section>
»
    	<title>Título sección 1</title>
	</section>
	<section>
    	<title>Objetivo</title>
   	 
    	<para>Utilizando algún lenguaje de programación o algún generador de lexer y parser para determinado lenguaje de programación deberán construir los analizadores léxico y sintáctico que permite analizar, validar y transformar un archivo en formato DocBook/XML.</para>
   
    	<para>La utilidad construida recibe un archivo en formato XML y contenido Docbook y deberá indicar si esta bien construido (adecuado al estándar, sin errores) de otra manera indicar los errores; adicionalmente a medida que analiza el documento deberá transformar el contenido en un documento HTML RESUMEN.</para>
   	 
    	<para>El analizador lexicográfico es un módulo que recibe una secuencia de caracteres que componen el programa a analizar y lo convierte lógicamente en una secuencia de tokens. El analizador sintáctico recibe la secuencia de tokens que le entrega el analizador lexicográfico y verifica.</para>
   	 
    	<para>
        	<emphasis>Hay dos grupos de herramientas que se pueden usar para generar los analizadores:</emphasis>
    	</para>

    	<para>1) Se utilizan expresiones regulares y autómatas finitos para el análisis lexico que la secuencia pueda ser generada por la gramática del lenguaje. ográfico y la técnica LALR para el análisis sintáctico. Ejemplos de esto son lex y yacc, que generan código C o C++, o JLex y CUP, que generan código Java. flex y bison son implementaciones libres y gratuitas de lex y yacc.</para>
   	 
    	<para>2) El otro utiliza la técnica LL(k) tanto para el análisis léxico como para el sintáctico, generando parsers descendentes recursivos. Ejemplos son JavaCC, que genera código Java, y ANTLR, que está escrito en Java pero puede generar código Java, C++ python o C#. ANTLR se puede conseguir en http://www.antlr.org/. https://en.wikipedia.org/wiki/Comparison_of_parser_generators</para>
   	 
	</section>
	<section>
    	<title>Elaboración y entrega</title>
    	<section>
        	<title>Modo de realización del trabajo</title>
        	<para>El trabajo se debe realizar de forma grupal en grupos de hasta cuatro (4) alumnos, donde cada integrante deberá realizar y presentar una parte del trabajo durante la presentación final.</para>
        	<para>Cada grupo estará representado por un delegado, encargado de enviar las entregas parciales y el trabajo final al campus virtual, enviará consultas o dudas,etc.</para>
        	<para>Cada grupo tendrá un docente designado como tutor encargado del seguimiento del trabajo, responder inquietudes.</para>
    	</section>
    	<section>
        	<title>Presentaciones</title>
        	<para>Se preveen tres instancias de presentación:</para>
        	<itemizedlist>
            	<listitem>
                	<para>1er entrega: Primera documentación del proyecto y gramática a generar. <emphasis>Domingo 23 de Abril de 2023</emphasis></para>
            	</listitem>
            	<listitem>
                	<para>2da entrega: Presentación del lexer o scanner que reconozca los tokens del lenguaje. <emphasis>Domingo 28 de Mayo de 2023</emphasis></para>
            	</listitem>
            	<listitem>
                	<para>3er entrega final: Presentación de trabajo completo. Lexer y Parser, incluye la presentación del trabajo ante la clase con una exposición de no más de 20 minutos.- <emphasis>Domingo 2 de Julio de 2023</emphasis></para>
            	</listitem>
        	</itemizedlist>
    	</section>
	</section>
	<section>
    	<title>Características de lenguaje de DocBook</title>
    	<para>3er entrega final: Presentación de trabajo completo. Lexer y parser, incluye la presentación del trabajo ante la clase con una exposición de no más de 20 minutos.-</para>
    	<section>
        	<title>Introducción</title>
        	<para>Como lenguaje semántico que es, DocBook nos permite crear documentos en un formato neutro, independiente de la presentación. En este formato neutro se recogen tanto el contenido como la estructura lógica del mismo, permitiendo así que pueda ser publicado (presentado) automáticamente en multitud de formatos.</para>
        	<para>Los documentos DocBook no describen ni la apariencia ni la presentación de sus contenidos, sino únicamente el sentido de dichos contenidos. Por ejemplo, en lugar de indicar exactamente cómo ha de visualizarse una determinada frase que es el título de un capítulo, DocBook simplemente indica que dicha frase es un título de capítulo.</para>
        	<para>Un documento DocBook contiene básicamente texto. Ahora bien, hay texto que sirve para indicar elementos, describir el contenido y propiedades de la página. Es decir, el texto contiene lo que se denomina etiquetas o tags.</para>
        	<para>Las etiquetas sirven para delimitar elementos de la página; por ejemplo, un párrafo es un elemento de la página, una tabla también. Incluso hay elementos que contienen otros elementos (las tablas constan de fila y las filas de celdas, por ejemplo).</para>
    	</section>
    	<section>
        	<title>Atribbtos</title>
        	<para>Algunas etiquetas tienen atributos. Los atributos son propiedades de cada elemento a las que podemos asignar un valor, de modo que dicho valor varía el comportamiento del elemento. Estos atributos pueden definir, por ejemplo, la dirección del texto o el lenguaje usado dentro del elemento o información consultiva para su correcta interpretación, entre muchas otras.</para>
        	<para>La forma de utilizar atributos es: <emphasis>&lt;elemento nombreDeAtributo1=”valor1” nombreDeAtriiuto2=”valor1” ...&gt;</emphasis></para>
        	<para>A los atributos se les asignan valores que deben ir entre comillas dobles. El símbolo de igualdad (=) es obligatorio.</para>
        	<para>EJemplo: <emphasis>&lt;para lang=”es”&gt;</emphasis></para>
    	</section>
    	<section>
        	<title>Tipos de Datos</title>
        	<itemizedlist>
            	<listitem>
                	<para>Numerar<itemizedlist>
                    	<listitem>
                        	<para>Se utilizarán números enteros</para>
                    	</listitem>
                    	<listitem>
                        	<para>Todos ellos serán tratados conjuntamente como números.</para>
                    	</listitem>
                	</itemizedlist></para>
            	</listitem>
            	<listitem>
                	<para>Cadena<itemizedlist>
                    	<listitem>
                        	<para>Estará compuesta por letras, números, signos de puntuación, caracteres especiales</para>
                    	</listitem>
                    	<listitem>
                        	<para>Aparecen dentro de los principales elementos , títulos, descripción, categoría,etc. <emphasis>“Ejemplo de cadena” “Ejemplo de cadena con salto de línea \n y tabulador \</emphasis>t”</para>
                    	</listitem>
                	</itemizedlist></para>
            	</listitem>
            	<listitem>
                	<para>URL<itemizedlist>
                    	<listitem>
                        	<para>Los único caracteres permitidos en URL son letra a, números, guión medio, guión bajo y punto. además de los caracteres reservados: <email># , /, :, &amp;, ?,=</email></para>
                    	</listitem>
                	<listitem>
                	</listitem>
                	</itemizedlist></para>
            	</listitem>
        	</itemizedlist>
    	</section>
	</section>
	<section>
    	<title>Componentes léxicos o tokens. Estructura básica de un documento DocBook</title>
    	<section>
        	<title>Etiquetas para estructura del documento</title>
        	<para>DocBook SGML es un lenguaje de marcas que se utiliza para definir la estructura de un documento, en lugar de su formato. En DocBook no hay Aceptor DocBook/XML y Conversor a HTML 15/17 Universidad Tecnológica Nacional Facultad Regional Resistencia Departamento de Ingeniería en Sistemas de Información Sintaxis y Semántica de Lenguajes etiquetas que pueda usar para hacer que un elemento esté en "negrita" o "cursiva". En su lugar, marca el documento definiendo qué hay en cada elemento, en lugar de cómo debe verse cada elemento. Aquí hay un ejemplo de DocBook muy simple</para>
        	<para>Donde el significado de los elementos es el siguiente:</para>
        	<itemizedlist>
            	<listitem>
                	<para>La etiqueta DOCTYPE indican el tipo de XML que estamos utilizando (concretamente article).</para>
            	</listitem>
            	<listitem>
                	<para>etiqueta <emphasis>article</emphasis>. Todo artículo está encerrado dentro de la apertura y el cierre de esa etiqueta. Marca el principio y fin del mismo (marca el elemento raíz de un documento).</para>
            	</listitem>
            	<listitem>
                	<para><emphasis>i</emphasis>. opcionalmente, querrá agregar alguna información de "encabezado". La información del encabezado incluye el título del artículo, el nombre y la dirección de correo electrónico del autor, el historial de revisión del documento y otras cosas. Por ahora, solo agregaremos el título del artículo y el nombre del autor.</para>
            	</listitem>
            	<listitem>
                	<para>Luego del encabezado aparecen las secciones de primer nivel, se pueden agregar secciones y subsecciones, respetando el orden de prioridad.</para>
            	</listitem>
        	</itemizedlist>
    	</section>
    	<section>
        	<title>Etiquetas</title>
    	</section>
	</section>
	<section>
    	<title>Control de errores</title>
	</section>
	<section>
    	<title>Modos de ejecución del intérprete</title>
	</section>
	<section>
    	<title>Documentación del trabajo</title>
	</section>
	<section>
    	<title>Presentación y Criterios de evaluación</title>
	</section>
	<section>
    	<title>Ejemplos</title>
	</section>
</article>
